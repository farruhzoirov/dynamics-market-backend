import { Injectable, Logger } from '@nestjs/common';
import * as TelegramBot from 'node-telegram-bot-api';
import { CreateOrderDto } from '../../../modules/order/dto/order.dto';
import { ProductItem } from '../../interfaces/product-items';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class TelegramNotificationService {
  public bot: TelegramBot;
  private readonly logger = new Logger(TelegramNotificationService.name);
  private readonly adminChatId: string;

  constructor(private readonly configService: ConfigService) {
    const botToken = this.configService.get('TELEGRAM').TELEGRAM_BOT_TOKEN;
    this.adminChatId = this.configService.get('TELEGRAM').ADMIN_CHAT_ID;

    if (!botToken) {
      this.logger.error('TELEGRAM_BOT_TOKEN is not set');
      return;
    }

    if (!this.adminChatId) {
      this.logger.error('ADMIN_CHAT_ID  is not set');
      return;
    }

    this.bot = new TelegramBot(botToken, { polling: false });
  }

  async sendOrderNotification(
    body: CreateOrderDto,
    items: ProductItem[],
    orderCode: string,
  ) {
    try {
      if (!this.bot || !this.adminChatId) {
        this.logger.warn('Telegram bot or admin chat id not configured');
        return;
      }

      const message = this.formatOrderMessage(orderCode, body, items);
      await this.bot.sendMessage(this.adminChatId, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      });

      this.logger.log(`Telegram notification sent for order: ${orderCode}`);
    } catch (err) {
      this.logger.error('Failed to send Telegram notification', err);
    }
  }

  private formatOrderMessage(
    orderCode: string,
    body: CreateOrderDto,
    items: ProductItem[],
  ): string {
    const customerInfo = `üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> ${orderCode}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${body.firstName} ${body.lastName}
üìß <b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> ${body.email}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${body.phone}
üè¢ <b>–¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞:</b> ${body.customerType}${body.companyName ? `\nüè™ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${body.companyName}` : ''}${body.comment ? `\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${body.comment}` : ''}`;

    const itemsInfo = items
      .map((item, index) => {
        return `${index + 1}. <b>${item.nameRu}</b>
üì¶ <b>–°–ö–£:</b> ${item.sku}
üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${item.quantity}
üí∞ <b>–¶–µ–Ω–∞:</b> ${item.price ? `${item.price.toLocaleString()} —Å—É–º` : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`;
      })
      .join('\n\n');

    const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);
    const totalPrice = items.reduce((sum, item) => {
      return sum + (item.price ? item.price * item.quantity : 0);
    }, 0);

    return `<b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>

${customerInfo}

üìã <b>–î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê:</b>
${itemsInfo}

üìä <b>–ò–¢–û–ì–û:</b>
üî¢ <b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> ${totalItems}
üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> ${totalPrice > 0 ? `${totalPrice.toLocaleString()}$` : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU', {
      timeZone: 'Asia/Tashkent',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    })}`;
  }
}
